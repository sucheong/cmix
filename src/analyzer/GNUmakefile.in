## -*- Makefile -*-
## Authors:  Jens Peter Secher (jpsecher@diku.dk)
##           Henning Makholm (makholm@diku.dk)
##           Arne John Glenstrup (panic@diku.dk)
## Content:  C-Mix system: Analyzer Makefile
##
## Copyright © 1999. The TOPPS group at DIKU, U of Copenhagen.
## Redistribution and modification are allowed under certain
## terms; see the file COPYING.cmix for details.

LINK_IN_TMP = @LINK_IN_TMP@

LD	= $(CXX)

#------------------------------------------
# LISTING OF SOURCE FILES
#------------------------------------------

SOURCES	= cmix.cc \
	  auxilary.cc strings.cc varstrings.cc ygtree.cc array.cc \
	  diagnostic.cc options.org fileops.cc \
	  directives.cc direc.l direc.y generator.cc \
	  tags.cc cpgm.cc corec.cc \
	  ALoc.cc fixiter.cc \
	  renamer.cc taboos.org \
	  output.cc commonout.cc \
	  outcpgm.cc outcore.cc outmisc.cc outpa.cc outbta.cc \
          lex.l gram.y gram.cc syntax.cc \
	  check.cc \
	  c2core.cc \
	  pa.cc typearr.cc \
	  transpred.cc \
	  closures.cc \
	  init.cc \
	  InvALocSet.cc \
	  separate.cc dataflow.cc share.cc \
	  btsanity.cc structsort.cc gegen.cc \
          gg-expr.cc gg-code.cc gg-decl.cc gg-cascades.cc gg-memo.cc \
          gg-struct.cc \
	  bta.cc btvars.cc btsolve.cc \
          @INSTANTIATION@ @GETOPT_SOURCE@

INTER = $(patsubst %.org,%.cc, $(filter %.org,$(SOURCES)) ) \
	$(patsubst %.l,%-yy.cc, $(filter %.l,$(SOURCES)) ) \
	$(patsubst %.y,%-tab.cc, $(filter %.y,$(SOURCES)) ) \
	release.cc
# INTER is the names of various autogenerated .cc files

CCSRC = $(filter %.cc,$(SOURCES)) $(INTER)
# CCSRC is the names of all the .cc files that make up the executable

CSRC = $(filter %.c,$(SOURCES))
# CSRC is the names of C sources files in the executable. This will
# contain getopt.c and getopt1.c unless configured not to use
# GNU getopt.

OBJ = $(patsubst %.cc,%.o,$(CCSRC)) $(patsubst %.c,%.o,$(CSRC))
# OBJ is the names of the corresponding .o files

BDOBJ = $(patsubst varstrings.o,bindist.o,$(OBJ))
# BDOBJ is the names of .o files for a binary-distribution cmix

#------------------------------------------
# VARIOUS RULES
#------------------------------------------

ifeq ($(srcdir),.)
IFLAGS = -I..
else
IFLAGS = -I. -I.. -I$(srcdir)
endif

INSTANCEFLAGS = $(CXXFLAGS)
NORMALFLAGS = $(CXXFLAGS) @NOIMPLICIT@

# since the prefixes are not directly derivable from the file names
# each of the yacc runs have their own rule:
direc-tab.h direc-tab.cc: direc.y
	$(YACC) -pcmx -d $<
	$(MV) y.tab.c direc-tab.cc || $(MV) y_tab.c direc-tab.cc
	$(MV) y.tab.h direc-tab.h  || $(MV) y_tab.h direc-tab.h
gram-tab.h gram-tab.cc: gram.y
	$(YACC) -pccc -d $<
	$(MV) y.tab.c gram-tab.cc || $(MV) y_tab.c gram-tab.cc
	$(MV) y.tab.h gram-tab.h  || $(MV) y_tab.h gram-tab.h
	$(PERL) -pi -e's/(int\s+)?yyparse\s+\([^()]*\)\s*;//' gram-tab.cc
# the Perl mangling of gram-tab.cc serves to please gcc 2.95 which
# barfs on free-standing declarations of member functions.

release.cc: $(top_srcdir)/release-stamp
	echo >release.cc 'char CmixRelease[] ="'`tr -d '\n ' < $<`'";'

%-yy.cc: %.l
	$(LEX) -otemp $<
	echo '#include <cmixconf.h>' | cat - temp > $@
	rm temp

%.cc: %.org %.perl
	$(PERL) $(srcdir)/$*.perl $(srcdir)/$*.org >$*.cc
# currently this is used for taboos.cc and options.cc

inst%.cc: inst%.org instances.perl
	$(PERL) $(srcdir)/instances.perl $(srcdir)/inst$*.org >inst$*.cc
# instXXX.cc need a special rule because the .perl file is differently named.

inst%.o: inst%.cc
	$(CXX) $(IFLAGS) $(INSTANCEFLAGS) -o $@ -c $<
# A special rule for compiling instN.cc - the $(INSTANCEFLAGS) are
# supposed to force the compiler to instantiate templates as much as
# it can, while the $(NORMALFLAGS) could put it in a more relaxed
# mode.

%.o: %.cc
	$(CXX) $(IFLAGS) $(NORMALFLAGS) -o $@ -c $<

%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<

ifeq ($(LINK_IN_TMP),yes)

/tmp/cmix.$(USER): $(OBJ)
	-$(RM) cmix$(EXEEXT)
	$(RM) $@
	-$(LN_S) /tmp/cmix.$(USER) cmix$(EXEEXT)
	$(LD) -o $@ $(OBJ) $(LDFLAGS)

cmix$(EXEEXT): /tmp/cmix.$(USER)
	$(RM) $@
	$(MV) $< $@
	$(LN_S) `pwd`/$@ $<
	$(TOUCH) $<

else

cmix$(EXEEXT): $(OBJ)
	$(LD) -o $@ $(OBJ) $(LDFLAGS)

endif

cmix.bindist: $(BDOBJ)
	$(LD) -o $@ $(BDOBJ) $(LDFLAGS)

scmix.bindist: $(BDOBJ)
	$(LD) -o $@ $(BDOBJ) $(STATICLDFLAGS)

#------------------------------------------
# GOAL RULES
#------------------------------------------

ifeq ($(LINK_IN_TMP),yes)
main_goal: /tmp/cmix.$(USER)
else
main_goal: all
endif

all: cmix$(EXEEXT)

info:

dvi:

install: cmix
	cd ..; $(MAKE) install-analyzer

dist:
	@echo make dist from the main source directory

check:

#------------------------------------------
# CLEANING RULES
#------------------------------------------

# These files are sometimes left over from development activities:
Mostlyclean:
	$(RM) core *.xyc a.out foo foo.* bar bar.* ost ost.* .\#* *~
	$(RM) *.ann *.bta *.core *.split *.iua
	$(RM) *-gen.cc *-gen testsuite.h `ls *.c | grep -v getopt`

Clean:
	$(RM) cmix$(EXEEXT) scmix$(EXEEXT) cmix.bindist scmix.bindist
	$(RM) *.o *.rpo release.cc

Toolclean:
	$(RM) $(INTER) inst-*.cc
	$(RM) $(patsubst %tab.cc, %tab.h, $(filter %-tab.cc,$(INTER)))

Distclean:
	$(RM) GNUmakefile

#------------------------------------------
# RULES FOR MAINTAINING THE MAKEFILE ITSELF
#------------------------------------------

recipe=analyzer/GNUmakefile:../Makefile.top:analyzer/GNUmakefile.in

GNUmakefile: GNUmakefile.in ../config.status
	cd .. ; if [ -f config.status ] ; \
	then CONFIG_FILES=$(recipe) ./config.status ; fi

Depend: $(INTER)
	$(MKDEP) -f Dependencies $(IFLAGS) $(CXXFLAGS) $(MKDEPFLAGS) $(CCSRC) \
		$(patsubst %-IGN,%,$(filter %-IGN,$(SOURCES)))
# A hack: by making the flex and bison output files dependencies of
# "depend", we make sure that they _and_ the headers are up to date before
# computing dependencies.

include $(srcdir)/Dependencies
