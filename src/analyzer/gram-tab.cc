
/*  A Bison parser, made from gram.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse cccparse
#define yylex ccclex
#define yyerror cccerror
#define yylval ccclval
#define yychar cccchar
#define yydebug cccdebug
#define yynerrs cccnerrs
#define	AUTO	258
#define	DOUBLE	259
#define	INT	260
#define	STRUCT	261
#define	BREAK	262
#define	ELSE	263
#define	LONG	264
#define	SWITCH	265
#define	CASE	266
#define	ENUM	267
#define	REGISTER	268
#define	TYPEDEF	269
#define	CHAR	270
#define	EXTERN	271
#define	RETURN	272
#define	UNION	273
#define	CONST	274
#define	FLOAT	275
#define	SHORT	276
#define	UNSIGNED	277
#define	CONTINUE	278
#define	FOR	279
#define	SIGNED	280
#define	VOID	281
#define	DEFAULT	282
#define	GOTO	283
#define	SIZEOF	284
#define	VOLATILE	285
#define	DO	286
#define	IF	287
#define	STATIC	288
#define	WHILE	289
#define	FLOATINGconstant	290
#define	INTEGERconstant	291
#define	CHARACTERconstant	292
#define	LONGconstant	293
#define	UINTEGERconstant	294
#define	STRINGliteral	295
#define	ULONGconstant	296
#define	DOUBLEconstant	297
#define	ARROW	298
#define	ICR	299
#define	DECR	300
#define	LEFTSHIFT	301
#define	RIGHTSHIFT	302
#define	LESSEQUAL	303
#define	GREATEQUAL	304
#define	EQUAL	305
#define	NOTEQUAL	306
#define	ANDAND	307
#define	OROR	308
#define	ELLIPSIS	309
#define	MULTassign	310
#define	DIVassign	311
#define	MODassign	312
#define	PLUSassign	313
#define	MINUSassign	314
#define	LSassign	315
#define	RSassign	316
#define	ANDassign	317
#define	ERassign	318
#define	ORassign	319
#define	IDENTIFIER	320
#define	TYPEDEFname	321
#define	CMIXTAG	322

#line 17 "gram.y"


#include <cmixconf.h>
// magic incantation from the autoconf manual
#ifdef __GNUC__
#  define alloca __builtin_alloca
#else
#  if HAVE_ALLOCA_H
#    include<alloca.h>
#  else
#    ifdef _AIX
#      pragma alloca
#    else
#      ifndef alloca /* predefined by HP cc +Olibcalls */
         char *alloca();
#      endif
#    endif
#  endif
#endif

#include "Plist.h"
#include "symboltable.h"
#include "syntax.h"
#include "cpgm.h"
#include "liststack.h"
#include "directives.h"
#include "auxilary.h"
#include "options.h"
#include "parser.h"

    static void yyerror(const char*message) {
        Diagnostic(ERROR,ccchere) << message;
    }

#define YYERROR_VERBOSE

#define YYDEBUG 1

#ifdef YYDEBUG
    static void settheflag();
#else
    #define settheflag()
#endif

// trick bison into producing a member function rather
// than a freestanding C function.
#define cccparse(x) cccParser::ParseNow(x)

extern Scope<ObjectDecl> names;                 // Names
extern ListStack<VarDecl> objects;             // List of real objects.


#line 72 "gram.y"
typedef union{
    // Temporaries and switchboards (syntax.h)
    PositionInUnion pos ;
    Parse_GeneralType* gtype;
    Parse_Type* pt;
    Parse_UserType* utype;
    UserTag uttag;
    Parse_TypedefType* tdtype;
    Plist<Parse_Typemod>* typemods;
    Parse_Declarator* idmod;
    Parse_MemberId* mempost;
    char* str;
    bool boolean;
    // Permanent structures/classes (cpgm.h)
    Type* type;
    Expr* expr;
    ConstExpr* cexpr;
    Stmt* stmt;
    Init* init;
    Plist<VarDecl>* vars;
    Plist<Expr>* exprs;
    Plist<MemberDecl>* membs;
    Plist<Stmt>* stmts;
    CProgram* cpgm;
    UnOp unop;
    AssignOp asgnop;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		506
#define	YYFLAG		-32768
#define	YYNTBASE	92

#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 213)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    79,     2,     2,     2,    81,    74,     2,    69,
    68,    75,    76,    73,    77,    72,    80,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    87,    89,    82,
    88,    83,    86,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    70,     2,    71,    84,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    90,    85,    91,    78,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    19,
    21,    25,    27,    29,    33,    36,    40,    42,    47,    50,
    51,    56,    57,    62,    65,    68,    70,    72,    74,    78,
    80,    83,    86,    89,    92,    97,    99,   101,   103,   105,
   107,   109,   111,   116,   118,   122,   126,   130,   132,   136,
   140,   142,   146,   150,   152,   156,   160,   164,   168,   170,
   174,   178,   180,   184,   186,   190,   192,   196,   198,   202,
   204,   208,   210,   216,   218,   222,   224,   226,   228,   230,
   232,   234,   236,   238,   240,   242,   244,   246,   250,   252,
   253,   255,   258,   261,   264,   267,   268,   273,   274,   279,
   280,   286,   287,   292,   293,   298,   299,   305,   307,   309,
   311,   313,   315,   317,   319,   322,   325,   327,   330,   332,
   334,   336,   338,   341,   344,   347,   350,   352,   355,   358,
   361,   364,   367,   370,   372,   375,   378,   381,   384,   387,
   389,   392,   395,   397,   399,   401,   403,   405,   407,   409,
   411,   413,   415,   417,   419,   421,   423,   425,   427,   428,
   434,   435,   442,   445,   447,   449,   451,   454,   457,   460,
   463,   467,   470,   474,   477,   479,   482,   484,   485,   487,
   490,   495,   501,   504,   507,   512,   513,   516,   518,   522,
   524,   528,   531,   534,   537,   540,   543,   546,   549,   552,
   555,   558,   560,   564,   566,   568,   571,   574,   575,   578,
   582,   587,   589,   591,   595,   597,   599,   601,   603,   605,
   607,   611,   616,   620,   621,   626,   627,   631,   632,   635,
   637,   638,   640,   643,   646,   652,   660,   666,   672,   680,
   690,   694,   697,   700,   704,   705,   708,   710,   713,   716,
   719,   721,   723,   726,   731,   736,   738,   739,   743,   744,
   748,   749,   754,   755,   760,   761,   766,   767,   772,   776,
   778,   780,   782,   784,   786,   788,   792,   797,   800,   803,
   807,   812,   815,   817,   819,   821,   824,   826,   828,   831,
   834,   838,   843,   846,   848,   852,   853,   859,   863,   868,
   871,   873,   874,   876,   878,   881,   885,   890,   892,   895,
   897,   900,   901,   906,   909,   913
};

static const short yyrhs[] = {    36,
     0,    39,     0,    38,     0,    41,     0,    35,     0,    42,
     0,    37,     0,    40,     0,    93,    40,     0,    65,     0,
    67,    68,    65,     0,    92,     0,    93,     0,    69,   117,
    68,     0,    69,    68,     0,    69,   100,    68,     0,    94,
     0,    96,    70,   117,    71,     0,    96,    95,     0,     0,
    96,    97,    72,    99,     0,     0,    96,    98,    43,    99,
     0,    96,    44,     0,    96,    45,     0,    65,     0,    66,
     0,   115,     0,   100,    73,   115,     0,    96,     0,    44,
   101,     0,    45,   101,     0,   102,   103,     0,    29,   101,
     0,    29,    69,   164,    68,     0,    74,     0,    75,     0,
    76,     0,    77,     0,    78,     0,    79,     0,   101,     0,
    69,   164,    68,   103,     0,   103,     0,   104,    75,   103,
     0,   104,    80,   103,     0,   104,    81,   103,     0,   104,
     0,   105,    76,   104,     0,   105,    77,   104,     0,   105,
     0,   106,    46,   105,     0,   106,    47,   105,     0,   106,
     0,   107,    82,   106,     0,   107,    83,   106,     0,   107,
    48,   106,     0,   107,    49,   106,     0,   107,     0,   108,
    50,   107,     0,   108,    51,   107,     0,   108,     0,   109,
    74,   108,     0,   109,     0,   110,    84,   109,     0,   110,
     0,   111,    85,   110,     0,   111,     0,   112,    52,   111,
     0,   112,     0,   113,    53,   112,     0,   113,     0,   113,
    86,   117,    87,   114,     0,   114,     0,   101,   116,   115,
     0,    88,     0,    55,     0,    56,     0,    57,     0,    58,
     0,    59,     0,    60,     0,    61,     0,    62,     0,    63,
     0,    64,     0,   115,     0,   117,    73,   115,     0,   114,
     0,     0,   117,     0,   137,    89,     0,   138,    89,     0,
   125,    89,     0,   121,    89,     0,     0,   131,   202,   122,
   165,     0,     0,   132,   202,   123,   165,     0,     0,   121,
    73,   202,   124,   165,     0,     0,   129,   195,   126,   165,
     0,     0,   130,   195,   127,   165,     0,     0,   125,    73,
   195,   128,   165,     0,   135,     0,   137,     0,   139,     0,
   136,     0,   138,     0,   140,     0,   141,     0,   132,   141,
     0,   131,   133,     0,   134,     0,   132,   134,     0,   141,
     0,   134,     0,    19,     0,    30,     0,   131,   142,     0,
   136,   141,     0,   135,   133,     0,   135,   142,     0,   142,
     0,   132,   142,     0,   136,   134,     0,   136,   142,     0,
   131,   143,     0,   138,   141,     0,   137,   133,     0,   143,
     0,   132,   143,     0,   138,   134,     0,   140,   141,     0,
   131,    66,     0,   139,   133,     0,    66,     0,   132,    66,
     0,   140,   134,     0,    14,     0,    16,     0,    33,     0,
     3,     0,    13,     0,     5,     0,    15,     0,    21,     0,
     9,     0,    20,     0,     4,     0,    25,     0,    22,     0,
    26,     0,   144,     0,   156,     0,     0,   147,    90,   145,
   148,    91,     0,     0,   147,   163,   146,    90,   148,    91,
     0,   147,   163,     0,     6,     0,    18,     0,   149,     0,
   148,   149,     0,   151,    89,     0,   150,    89,     0,   132,
   153,     0,   150,    73,   153,     0,   130,   152,     0,   151,
    73,   152,     0,   195,   154,     0,   155,     0,   202,   154,
     0,   155,     0,     0,   155,     0,    87,   118,     0,    12,
    90,   157,    91,     0,    12,   163,    90,   157,    91,     0,
    12,   163,     0,   163,   158,     0,   157,    73,   163,   158,
     0,     0,    88,   118,     0,   160,     0,   160,    73,    54,
     0,   161,     0,   160,    73,   161,     0,   129,   207,     0,
   129,   202,     0,   129,   197,     0,   130,   207,     0,   130,
   202,     0,   130,   197,     0,   131,   207,     0,   131,   202,
     0,   132,   207,     0,   132,   202,     0,    65,     0,   162,
    73,    65,     0,    65,     0,    66,     0,   130,   207,     0,
   132,   207,     0,     0,    88,   166,     0,    90,   167,    91,
     0,    90,   167,    73,    91,     0,   115,     0,   166,     0,
   167,    73,   166,     0,   169,     0,   170,     0,   177,     0,
   178,     0,   179,     0,   180,     0,   163,    87,   168,     0,
    11,   118,    87,   168,     0,    27,    87,   168,     0,     0,
    90,   171,   173,    91,     0,     0,   172,   174,   175,     0,
     0,   174,   120,     0,   176,     0,     0,   168,     0,   176,
   168,     0,   119,    89,     0,    32,    69,   117,    68,   168,
     0,    32,    69,   117,    68,   168,     8,   168,     0,    10,
    69,   117,    68,   168,     0,    34,    69,   117,    68,   168,
     0,    31,   168,    34,    69,   117,    68,    89,     0,    24,
    69,   119,    89,   119,    89,   119,    68,   168,     0,    28,
   163,    89,     0,    23,    89,     0,     7,    89,     0,    17,
   119,    89,     0,     0,   182,   183,     0,   184,     0,   183,
   184,     0,    65,    87,     0,    65,    65,     0,   188,     0,
   120,     0,   185,    89,     0,    14,    67,    68,    66,     0,
    14,    67,    68,    65,     0,   202,     0,     0,   205,   187,
   174,     0,     0,   186,   189,   194,     0,     0,   129,   186,
   190,   194,     0,     0,   130,   186,   191,   194,     0,     0,
   131,   186,   192,   194,     0,     0,   132,   186,   193,   194,
     0,    90,   173,    91,     0,   202,     0,   196,     0,   199,
     0,   197,     0,   201,     0,   198,     0,    69,   198,    68,
     0,    69,   198,    68,   210,     0,   209,   198,     0,   209,
   201,     0,    69,   200,    68,     0,    69,   200,    68,   210,
     0,   209,   199,     0,   201,     0,   199,     0,    66,     0,
    66,   210,     0,   203,     0,   204,     0,   209,   204,     0,
   204,   210,     0,    69,   203,    68,     0,    69,   203,    68,
   210,     0,   209,   203,     0,    65,     0,    69,   204,    68,
     0,     0,   204,    69,   206,   162,    68,     0,    69,   205,
    68,     0,    69,   205,    68,   210,     0,   209,   205,     0,
   208,     0,     0,   209,     0,   210,     0,   209,   208,     0,
    69,   208,    68,     0,    69,   208,    68,   210,     0,    75,
     0,    75,   132,     0,   212,     0,    69,    68,     0,     0,
    69,   211,   159,    68,     0,    70,    71,     0,    70,   118,
    71,     0,   212,    70,   118,    71,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   210,   215,   219,   223,   227,   231,   235,   242,   248,   265,
   271,   277,   278,   279,   282,   284,   287,   289,   293,   297,
   297,   301,   301,   307,   311,   317,   319,   322,   327,   333,
   335,   336,   337,   341,   345,   351,   353,   354,   355,   356,
   357,   360,   362,   368,   370,   374,   378,   384,   386,   390,
   396,   398,   402,   408,   410,   414,   418,   422,   428,   430,
   434,   440,   442,   448,   450,   456,   458,   464,   466,   472,
   474,   480,   482,   488,   490,   496,   498,   499,   500,   501,
   502,   503,   504,   505,   506,   507,   510,   512,   516,   520,
   523,   559,   566,   570,   571,   577,   581,   582,   585,   586,
   589,   592,   596,   597,   600,   601,   604,   607,   610,   612,
   616,   619,   621,   626,   628,   630,   634,   636,   640,   642,
   645,   647,   650,   654,   656,   658,   662,   664,   666,   668,
   672,   676,   678,   682,   684,   686,   691,   694,   699,   703,
   706,   711,   715,   717,   718,   719,   720,   723,   725,   726,
   727,   728,   729,   730,   731,   732,   735,   737,   740,   742,
   751,   757,   764,   771,   773,   777,   779,   783,   785,   788,
   791,   795,   798,   802,   805,   809,   812,   816,   819,   822,
   827,   836,   841,   848,   853,   859,   862,   867,   869,   872,
   874,   877,   880,   882,   884,   886,   888,   890,   892,   894,
   896,   904,   911,   917,   919,   922,   929,   937,   940,   944,
   947,   949,   953,   956,   963,   965,   966,   967,   968,   969,
   972,   979,   983,   989,   995,  1002,  1004,  1013,  1015,  1018,
  1020,  1024,  1029,  1036,  1047,  1052,  1056,  1062,  1067,  1071,
  1086,  1091,  1095,  1099,  1107,  1108,  1111,  1113,  1114,  1118,
  1124,  1127,  1128,  1131,  1133,  1144,  1146,  1149,  1152,  1156,
  1156,  1159,  1159,  1162,  1162,  1165,  1165,  1168,  1170,  1175,
  1177,  1180,  1182,  1185,  1187,  1193,  1196,  1198,  1200,  1207,
  1210,  1212,  1216,  1218,  1221,  1224,  1228,  1230,  1233,  1236,
  1238,  1240,  1242,  1246,  1249,  1253,  1254,  1256,  1258,  1260,
  1264,  1266,  1268,  1271,  1273,  1275,  1277,  1281,  1284,  1291,
  1293,  1298,  1298,  1302,  1305,  1307
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","AUTO","DOUBLE",
"INT","STRUCT","BREAK","ELSE","LONG","SWITCH","CASE","ENUM","REGISTER","TYPEDEF",
"CHAR","EXTERN","RETURN","UNION","CONST","FLOAT","SHORT","UNSIGNED","CONTINUE",
"FOR","SIGNED","VOID","DEFAULT","GOTO","SIZEOF","VOLATILE","DO","IF","STATIC",
"WHILE","FLOATINGconstant","INTEGERconstant","CHARACTERconstant","LONGconstant",
"UINTEGERconstant","STRINGliteral","ULONGconstant","DOUBLEconstant","ARROW",
"ICR","DECR","LEFTSHIFT","RIGHTSHIFT","LESSEQUAL","GREATEQUAL","EQUAL","NOTEQUAL",
"ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign","MODassign","PLUSassign",
"MINUSassign","LSassign","RSassign","ANDassign","ERassign","ORassign","IDENTIFIER",
"TYPEDEFname","CMIXTAG","')'","'('","'['","']'","'.'","','","'&'","'*'","'+'",
"'-'","'~'","'!'","'/'","'%'","'<'","'>'","'^'","'|'","'?'","':'","'='","';'",
"'{'","'}'","constant","string_literal_list","primary_expression","argument_list",
"postfix_expression","@1","@2","member_name","argument_expression_list","unary_expression",
"unary_operator","cast_expression","multiplicative_expression","additive_expression",
"shift_expression","relational_expression","equality_expression","AND_expression",
"exclusive_OR_expression","inclusive_OR_expression","logical_AND_expression",
"logical_OR_expression","conditional_expression","assignment_expression","assignment_operator",
"comma_expression","constant_expression","comma_expression_opt","declaration",
"default_declaring_list","@3","@4","@5","declaring_list","@6","@7","@8","declaration_specifier",
"type_specifier","declaration_qualifier_list","type_qualifier_list","declaration_qualifier",
"type_qualifier","basic_declaration_specifier","basic_type_specifier","sue_declaration_specifier",
"sue_type_specifier","typedef_declaration_specifier","typedef_type_specifier",
"storage_class","basic_type_name","elaborated_type_name","aggregate_name","@9",
"@10","aggregate_key","member_declaration_list","member_declaration","member_default_declaring_list",
"member_declaring_list","member_declarator","member_identifier_declarator","bit_field_size_opt",
"bit_field_size","enum_name","enumerator_list","enumerator_value_opt","parameter_type_list",
"parameter_list","parameter_declaration","identifier_list","identifier_or_typedef_name",
"type_name","initializer_opt","initializer","initializer_list","statement","labeled_statement",
"compound_statement","@11","compound_stmt_marker","compound_statement1","declaration_list",
"statement_list_opt","statement_list","expression_statement","selection_statement",
"iteration_statement","jump_statement","start_symbol","@12","translation_unit",
"external_definition","cmix_syntactic_ext","function_head","@13","function_definition",
"@14","@15","@16","@17","@18","function_body","declarator","typedef_declarator",
"parameter_typedef_declarator","clean_typedef_declarator","paren_typedef_declarator",
"inner_paren_typedef_declarator","bare_typedef_declarator","identifier_declarator",
"mod_identifier_declarator","paren_identifier_declarator","old_function_declarator",
"@19","abstract_declarator_opt","abstract_declarator","type_prefix","type_postfix",
"@20","array_postfix", NULL
};
#endif

static const short yyr1[] = {     0,
    92,    92,    92,    92,    92,    92,    92,    93,    93,    94,
    94,    94,    94,    94,    95,    95,    96,    96,    96,    97,
    96,    98,    96,    96,    96,    99,    99,   100,   100,   101,
   101,   101,   101,   101,   101,   102,   102,   102,   102,   102,
   102,   103,   103,   104,   104,   104,   104,   105,   105,   105,
   106,   106,   106,   107,   107,   107,   107,   107,   108,   108,
   108,   109,   109,   110,   110,   111,   111,   112,   112,   113,
   113,   114,   114,   115,   115,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   117,   117,   118,   119,
   119,   120,   120,   120,   120,   122,   121,   123,   121,   124,
   121,   126,   125,   127,   125,   128,   125,   129,   129,   129,
   130,   130,   130,   131,   131,   131,   132,   132,   133,   133,
   134,   134,   135,   135,   135,   135,   136,   136,   136,   136,
   137,   137,   137,   138,   138,   138,   139,   139,   139,   140,
   140,   140,   141,   141,   141,   141,   141,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   143,   143,   145,   144,
   146,   144,   144,   147,   147,   148,   148,   149,   149,   150,
   150,   151,   151,   152,   152,   153,   153,   154,   154,   155,
   156,   156,   156,   157,   157,   158,   158,   159,   159,   160,
   160,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   162,   162,   163,   163,   164,   164,   165,   165,   166,
   166,   166,   167,   167,   168,   168,   168,   168,   168,   168,
   169,   169,   169,   171,   170,   172,   173,   174,   174,   175,
   175,   176,   176,   177,   178,   178,   178,   179,   179,   179,
   180,   180,   180,   180,   182,   181,   183,   183,   183,   183,
   184,   184,   184,   185,   185,   186,   187,   186,   189,   188,
   190,   188,   191,   188,   192,   188,   193,   188,   194,   195,
   195,   196,   196,   197,   197,   198,   198,   198,   198,   199,
   199,   199,   200,   200,   201,   201,   202,   202,   203,   203,
   203,   203,   203,   204,   204,   206,   205,   205,   205,   205,
   207,   207,   208,   208,   208,   208,   208,   209,   209,   210,
   210,   211,   210,   212,   212,   212
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     3,     1,     1,     3,     2,     3,     1,     4,     2,     0,
     4,     0,     4,     2,     2,     1,     1,     1,     3,     1,
     2,     2,     2,     2,     4,     1,     1,     1,     1,     1,
     1,     1,     4,     1,     3,     3,     3,     1,     3,     3,
     1,     3,     3,     1,     3,     3,     3,     3,     1,     3,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     5,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     0,
     1,     2,     2,     2,     2,     0,     4,     0,     4,     0,
     5,     0,     4,     0,     4,     0,     5,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     1,     2,     1,     1,
     1,     1,     2,     2,     2,     2,     1,     2,     2,     2,
     2,     2,     2,     1,     2,     2,     2,     2,     2,     1,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
     0,     6,     2,     1,     1,     1,     2,     2,     2,     2,
     3,     2,     3,     2,     1,     2,     1,     0,     1,     2,
     4,     5,     2,     2,     4,     0,     2,     1,     3,     1,
     3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     1,     1,     2,     2,     0,     2,     3,
     4,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     3,     4,     3,     0,     4,     0,     3,     0,     2,     1,
     0,     1,     2,     2,     5,     7,     5,     5,     7,     9,
     3,     2,     2,     3,     0,     2,     1,     2,     2,     2,
     1,     1,     2,     4,     4,     1,     0,     3,     0,     3,
     0,     4,     0,     4,     0,     4,     0,     4,     3,     1,
     1,     1,     1,     1,     1,     3,     4,     2,     2,     3,
     4,     2,     1,     1,     1,     2,     1,     1,     2,     2,
     3,     4,     2,     1,     3,     0,     5,     3,     4,     2,
     1,     0,     1,     1,     2,     3,     4,     1,     2,     1,
     2,     0,     4,     2,     3,     4
};

static const short yydefact[] = {   245,
     0,   146,   153,   148,   164,   151,     0,   147,   143,   149,
   144,   165,   121,   152,   150,   155,   154,   156,   122,   145,
   294,   140,     0,   308,   252,     0,     0,     0,     0,     0,
     0,   117,   108,   111,   109,   112,   110,   113,   114,   127,
   134,   157,     0,   158,   246,   247,     0,   259,   251,   256,
   287,   288,   257,     0,   204,   205,     0,   183,     0,   250,
   249,   294,     0,     0,     0,   309,     0,    95,     0,    94,
   285,     0,   261,   102,   271,   273,   275,   272,   274,   270,
     0,   263,   104,   143,   138,   116,   120,   119,   123,   131,
   265,    96,   141,   118,   115,   128,   135,   267,    98,   125,
   126,   129,   124,   130,    92,   133,    93,   136,   132,   139,
   142,   137,   159,   163,   248,   253,     0,   312,     0,   290,
   310,   228,   293,   289,   300,     0,   186,     0,     0,   291,
   295,   298,     0,   100,   288,     0,     0,   106,   270,     0,
   312,   286,     0,   284,     0,   283,     0,   208,   278,   282,
   279,     0,   208,     0,   208,     0,   208,     0,     0,   226,
   260,   311,     0,     0,     0,     5,     1,     7,     3,     2,
     8,     4,     6,     0,     0,    10,     0,     0,   314,    36,
    37,    38,    39,    40,    41,    12,    13,    17,    30,    42,
     0,    44,    48,    51,    54,    59,    62,    64,    66,    68,
    70,    72,    89,     0,     0,   258,     0,   181,     0,   184,
     0,   255,   254,   292,   299,     0,   208,   289,   208,   276,
   280,   262,     0,   103,   264,   105,   266,    97,   268,    99,
     0,     0,   111,   112,   113,     0,   166,     0,     0,     0,
   228,     0,   202,     0,   302,   302,   302,   302,   109,   112,
     0,   188,   190,     0,    34,     0,    31,    32,     0,    42,
    74,    87,     0,   302,   302,     0,     9,    24,    25,     0,
     0,    19,     0,     0,    33,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   315,     0,   229,     0,     0,     0,
     0,   186,   187,   182,   101,   107,   277,   281,     0,   212,
   209,     0,   172,   175,   178,   170,   177,   178,   160,   167,
     0,   169,     0,   168,     0,    90,   269,   297,     0,   312,
   194,   193,   192,   301,   303,   304,   197,   196,   195,   312,
   199,   198,   303,   201,   200,   313,     0,     0,    11,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    76,
     0,    14,     0,   312,   206,   303,   207,     0,    15,     0,
    28,     0,     0,     0,    45,    46,    47,    49,    50,    52,
    53,    57,    58,    55,    56,    60,    61,    63,    65,    67,
    69,    71,     0,   316,    96,    98,   185,   213,     0,   180,
   174,   179,   176,   171,   173,   162,     0,     0,     0,    90,
     0,     0,     0,     0,    90,     0,     0,    10,   140,   224,
    91,     0,     0,   232,   215,   216,   227,    90,   217,   218,
   219,   220,   203,     0,   305,   189,   191,    35,    75,    88,
    43,    16,     0,    18,    26,    27,    21,    23,     0,     0,
   210,   243,     0,     0,     0,   242,    90,    90,     0,     0,
     0,     0,   226,   234,    90,   233,   306,    29,    73,   211,
   214,     0,    90,   244,     0,   223,   241,     0,     0,     0,
     0,   221,   307,    90,   222,    90,     0,    90,    90,   225,
   237,     0,     0,   235,   238,    90,     0,    90,     0,   239,
   236,    90,   240,     0,     0,     0
};

static const short yydefgoto[] = {   186,
   187,   188,   272,   189,   273,   274,   447,   370,   260,   191,
   192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   261,   262,   361,   421,   204,   422,    25,    26,   155,
   157,   217,    27,   148,   153,   219,    28,   231,    30,   232,
    86,    32,    33,    34,    35,   234,    37,    38,    88,    40,
    41,    42,   158,   159,    43,   236,   237,   238,   239,   313,
   316,   401,   314,    44,   126,   210,   251,   252,   253,   244,
   423,   266,   224,   311,   399,   424,   425,   426,   463,   241,
   242,   206,   427,   428,   429,   430,   431,   432,   504,     1,
    45,    46,    47,    48,   122,    49,   117,   147,   152,   154,
   156,   161,    74,    75,    76,    77,    78,   145,    79,   139,
    51,   135,    53,   163,   333,   334,   136,   336,   164,   121
};

static const short yypact[] = {-32768,
  1029,-32768,-32768,-32768,-32768,-32768,   -26,-32768,    -2,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    53,-32768,   301,   140,-32768,   -39,   -12,   246,   246,  1066,
  1097,-32768,  1604,  1604,   509,   516,   379,   379,-32768,-32768,
-32768,-32768,   178,-32768,  1134,-32768,   -61,-32768,-32768,-32768,
-32768,   273,-32768,   301,-32768,-32768,   286,   -48,     6,-32768,
-32768,-32768,    58,   249,    88,   140,   308,-32768,   432,-32768,
   311,   246,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -14,
   246,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -14,-32768,-32768,-32768,-32768,-32768,-32768,   -14,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    31,-32768,-32768,    98,   130,  1391,-32768,
   112,-32768,-32768,   273,-32768,   -10,   106,   286,   345,   311,
-32768,   311,   308,-32768,   311,   308,   432,-32768,-32768,   432,
   142,-32768,   160,-32768,   168,-32768,    98,   132,-32768,-32768,
-32768,    98,   132,    98,   132,    98,   132,   484,   162,-32768,
-32768,-32768,   177,  1315,  1459,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1476,  1476,-32768,   188,   921,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   224,-32768,   234,-32768,
  1527,-32768,    82,   403,   437,   -23,   476,   186,   197,   187,
   242,     5,-32768,   243,  1527,  1315,   286,-32768,  1527,-32768,
    15,-32768,-32768,-32768,-32768,   374,   132,   311,   132,   311,
   311,-32768,  1335,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   205,   848,  1623,   140,   140,   626,-32768,    16,    46,   484,
-32768,   237,-32768,    92,   380,   380,   879,   998,   379,   379,
   264,   267,-32768,   921,-32768,  1527,-32768,-32768,   284,   625,
-32768,-32768,   110,   319,  1232,   291,-32768,-32768,-32768,  1408,
  1527,-32768,   292,   325,-32768,  1527,  1527,  1527,  1527,  1527,
  1527,  1527,  1527,  1527,  1527,  1527,  1527,  1527,  1527,  1527,
  1527,  1527,  1527,  1527,-32768,   304,-32768,   432,   432,  1165,
  1202,   106,-32768,-32768,-32768,-32768,-32768,-32768,  1335,-32768,
-32768,  1527,-32768,-32768,   285,-32768,-32768,   285,-32768,-32768,
   251,-32768,   205,-32768,   649,   549,-32768,-32768,   320,   332,
-32768,-32768,-32768,-32768,   380,-32768,-32768,-32768,-32768,   401,
-32768,-32768,   164,-32768,-32768,-32768,  1260,   322,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1527,-32768,  1527,   214,-32768,   319,-32768,  1527,-32768,   117,
-32768,   103,   468,   468,-32768,-32768,-32768,    82,    82,   403,
   403,   437,   437,   437,   437,   -23,   -23,   476,   186,   197,
   187,   242,    66,-32768,-32768,-32768,-32768,-32768,    41,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   314,   336,  1527,  1527,
   327,   349,   364,   286,   772,   354,   392,   385,   399,-32768,
   375,   405,   413,-32768,-32768,-32768,-32768,   697,-32768,-32768,
-32768,-32768,-32768,   424,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1527,-32768,-32768,-32768,-32768,-32768,  1527,  1317,
-32768,-32768,  1527,   431,   422,-32768,  1527,   772,   435,   497,
  1527,  1527,-32768,-32768,   772,-32768,   311,-32768,-32768,-32768,
-32768,   144,   772,-32768,   447,-32768,-32768,   482,   158,   223,
   454,-32768,-32768,   772,-32768,  1527,  1527,   772,   772,-32768,
-32768,   503,   257,   587,-32768,  1527,   507,   772,   535,-32768,
-32768,   772,-32768,   604,   606,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   233,-32768,   148,-32768,
  -169,   258,   259,   173,   256,   321,   318,   326,   317,   328,
-32768,  -112,  -155,-32768,  -160,  -188,  -344,  -203,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -102,     8,   -89,     9,
   -22,   113,-32768,  -109,  -150,     3,-32768,    33,     7,   220,
   -25,-32768,-32768,-32768,-32768,   371,  -213,-32768,-32768,   289,
   298,   295,  -185,-32768,   492,   331,-32768,-32768,   275,-32768,
    -6,   382,   152,  -289,-32768,   -11,-32768,-32768,-32768,-32768,
   166,   393,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   592,-32768,   571,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   361,   -13,-32768,   302,   -45,    18,-32768,   -37,   174,
    44,    56,    48,-32768,   217,  -105,     1,   -52,-32768,-32768
};


#define	YYLAST		1653


static const short yytable[] = {   120,
    58,    54,   297,    36,    90,    97,   203,    39,    29,    31,
   100,   120,   106,   249,   110,    83,   296,   263,   142,   398,
   303,   275,   320,    54,   283,   284,   143,   116,    81,    81,
    54,    54,    66,    67,   146,   149,   114,    95,    55,    56,
   103,   128,   109,   151,   112,    54,   317,    36,   233,    68,
   127,    39,    29,    31,    54,   138,    52,   293,   285,   286,
    69,   245,   207,    57,    59,   455,    63,   310,   233,   140,
    65,   120,    81,   129,   247,  -256,    70,   214,    64,   215,
   208,    81,   120,    52,    52,    52,    52,   207,   321,   144,
   294,   143,   203,   263,   149,   263,   203,   123,   150,   146,
    52,   125,   151,   298,   322,   304,   375,   376,   377,   124,
   372,   320,   475,   450,   371,    63,   300,    60,   323,    65,
  -161,   127,   297,   400,   123,   130,   233,    64,   125,   402,
   233,   451,   402,   393,   324,   317,   124,   140,   363,    61,
   140,   492,    87,    94,   233,    87,   102,    87,   108,    87,
   111,   499,   449,   310,   144,   132,   276,   150,    13,   328,
   471,   277,   278,   120,   329,   120,   250,   307,   308,    19,
    39,   246,   248,   444,    50,   363,    63,   362,    94,   123,
    63,   205,   363,   123,   442,   264,   265,   160,   216,   443,
   235,   218,   216,   209,  -296,   218,   249,   162,   441,   203,
   302,    80,    80,    92,    99,   439,    97,   440,    36,   162,
   235,   484,    39,   299,   301,   233,   363,   315,    50,   223,
   454,    90,    97,   298,   434,   488,   106,   220,    62,   435,
   363,   140,   340,   119,   434,   221,   300,   435,    24,    97,
   134,   243,    55,    56,   245,   335,   335,   343,   343,    89,
    96,   240,   101,   104,    95,   259,   109,   247,   434,   289,
   435,   264,   265,   267,   366,   366,   190,   113,   235,    62,
    71,   291,   235,   137,    90,    97,   -22,   268,   269,    24,
   290,   162,   364,   119,   143,    83,   235,   468,    24,   149,
   489,   312,   472,   292,   310,   363,   203,   151,   140,   140,
   479,   480,   270,   271,   226,   -20,   228,    95,   230,   315,
    62,    71,   255,   295,    72,    62,   131,   118,   119,   133,
    24,   257,   258,   140,   497,    24,   493,   327,    36,   363,
   335,   346,    39,   299,   301,   335,   469,   312,   190,   347,
   343,   118,   119,   343,    94,   102,   108,   111,   349,   250,
    55,    56,   190,    39,   246,   248,   190,   235,   368,    87,
    94,    87,   108,   373,   366,    62,   366,   374,   305,    23,
   306,   312,    62,    63,   394,    24,   133,    94,   123,   141,
   119,     2,    24,    63,   433,   216,   123,   364,   119,   438,
   218,     8,    84,    24,    11,   216,    62,    13,   218,   162,
   330,   119,   452,   460,   453,   318,    24,   459,    19,   212,
   213,    20,    87,    94,   483,   456,   466,   457,   332,   338,
   341,   344,   461,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   131,   141,   119,    62,    71,   476,   363,   330,   119,
   458,    96,   104,   482,    24,   382,   383,   384,   385,   190,
   462,   485,   339,   342,   345,    62,    89,    96,   162,   340,
   119,  -204,   491,   395,   396,    24,   494,   495,   279,   280,
   365,   367,   281,   282,    96,  -205,   501,     3,     4,     5,
   503,   467,     6,   464,   318,     7,    62,    71,    10,   465,
   137,    12,    13,    14,    15,    16,    24,   222,    17,    18,
   474,     2,   225,    19,   227,   190,   229,   473,     2,    89,
    96,     8,    84,   477,    11,   287,   288,    13,     8,    84,
   478,    11,   445,   446,    13,   486,   378,   379,    19,   380,
   381,    20,   386,   387,   490,    19,   331,   337,    20,    22,
   487,     2,     3,     4,     5,   407,   190,     6,   408,   409,
     7,     8,    84,    10,    11,   410,    12,    13,    14,    15,
    16,   411,   412,    17,    18,   413,   414,   165,    19,   415,
   416,    20,   417,   166,   167,   168,   169,   170,   171,   172,
   173,   496,   174,   175,   498,   500,   190,   105,    73,    82,
    91,    98,   502,   505,   107,   506,   448,   389,   391,   388,
   325,   405,   403,   418,   419,   177,   390,   178,   404,   211,
   392,   437,   180,   181,   182,   183,   184,   185,   481,     3,
     4,     5,   397,   326,     6,   348,   115,     7,   420,  -231,
    10,     0,     0,    12,    13,    14,    15,    16,     0,     0,
    17,    18,     3,     4,     5,    19,     0,     6,     0,     0,
     7,     0,     0,    10,     0,     0,    12,    13,    14,    15,
    16,     0,     0,    17,    18,     0,     0,     0,    19,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
     0,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   407,     0,     0,   408,   409,     0,     0,
     0,     0,   360,   410,    22,     0,   319,     0,     0,   411,
   412,     0,     0,   413,   414,   165,     0,   415,   416,     0,
   417,   166,   167,   168,   169,   170,   171,   172,   173,   406,
   174,   175,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   418,    56,   177,     0,   178,     0,     0,     0,     0,
   180,   181,   182,   183,   184,   185,     0,     0,   407,     0,
     0,   408,   409,     0,     0,     0,   420,  -230,   410,     0,
     0,     0,     0,     0,   411,   412,     0,     0,   413,   414,
   165,     0,   415,   416,     0,   417,   166,   167,   168,   169,
   170,   171,   172,   173,     0,   174,   175,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   418,    56,   177,     0,
   178,     0,     0,     0,     0,   180,   181,   182,   183,   184,
   185,     3,     4,     5,     0,     0,     6,     0,     0,     7,
     0,   420,    10,     0,     0,    12,    13,    14,    15,    16,
     0,     0,    17,    18,     0,     0,     0,    19,     0,     0,
     0,     2,     3,     4,     5,     0,     0,     6,     0,     0,
     7,     8,    84,    10,    11,     0,    12,    13,    14,    15,
    16,     0,     0,    17,    18,     0,     0,     0,    19,     0,
     0,    20,    62,    93,     0,     0,   133,     0,     0,     0,
     0,     0,    24,     0,     3,     4,     5,     0,     0,     6,
     0,     0,     7,     0,   312,    10,     0,     0,    12,    13,
    14,    15,    16,    62,    85,    17,    18,   340,   119,   165,
    19,     0,     0,    24,     0,   166,   167,   168,   169,   170,
   171,   172,   173,     0,   174,   175,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   176,    22,   177,     0,   178,
     0,     0,     0,     0,   180,   181,   182,   183,   184,   185,
     2,     3,     4,     5,     0,     0,     6,     0,     0,     7,
     8,    84,    10,    11,     0,    12,    13,    14,    15,    16,
     0,     0,    17,    18,     0,     0,     0,    19,     0,     0,
    20,     2,     3,     4,     5,     0,     0,     6,     0,     0,
     7,     8,     9,    10,    11,     0,    12,    13,    14,    15,
    16,     0,     0,    17,    18,     0,     0,     0,    19,     0,
     0,    20,    62,    93,     0,     0,   340,   119,     2,     3,
     4,     5,    24,     0,     6,     0,     0,     7,     8,    84,
    10,    11,     0,    12,    13,    14,    15,    16,     0,     0,
    17,    18,     0,    21,    22,    19,     0,    23,    20,     2,
     3,     4,     5,    24,     0,     6,     0,     0,     7,     8,
    84,    10,    11,     0,    12,    13,    14,    15,    16,     0,
     0,    17,    18,     0,     0,     0,    19,     0,     0,    20,
    62,    85,     0,     0,    23,     0,     2,     3,     4,     5,
    24,     0,     6,     0,     0,     7,     8,     9,    10,    11,
     0,    12,    13,    14,    15,    16,     0,     0,    17,    18,
     0,    62,    93,    19,     0,    23,    20,     2,     3,     4,
     5,    24,     0,     6,     0,     0,     7,     8,    84,    10,
    11,     0,    12,    13,    14,    15,    16,     0,     0,    17,
    18,     0,     0,     0,    19,     0,     0,    20,    62,    22,
     0,     0,    23,     0,     2,     3,     4,     5,    24,     0,
     6,     0,     0,     7,     8,    84,    10,    11,     0,    12,
    13,    14,    15,    16,     0,     0,    17,    18,     0,    62,
    85,    19,     0,   133,    20,     3,     4,     5,     0,    24,
     6,     0,     0,     7,     0,     0,    10,     0,     0,    12,
    13,    14,    15,    16,     0,     0,    17,    18,     0,     0,
     0,    19,     2,     3,     4,     5,    62,    93,     6,     0,
   133,     7,     8,    84,    10,    11,    24,    12,    13,    14,
    15,    16,     0,     0,    17,    18,     0,     0,     0,    19,
     0,     0,    20,     0,     0,     0,     0,    93,     0,     0,
   364,   119,     0,     0,     0,     0,    24,     0,     0,     0,
     0,     0,     0,   436,     0,     0,     0,     2,     3,     4,
     5,     0,     0,     6,     0,    22,     7,     8,    84,    10,
    11,     0,    12,    13,    14,    15,    16,     0,     0,    17,
    18,     0,     0,     0,    19,   165,     0,    20,     0,     0,
     0,   166,   167,   168,   169,   170,   171,   172,   173,     0,
   174,   175,     0,   165,     0,     0,     0,     0,     0,   166,
   167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
    22,   176,     0,   177,     0,   178,     0,     0,     0,     0,
   180,   181,   182,   183,   184,   185,     0,     0,     0,   176,
     0,   177,     0,   178,     0,     0,   309,   470,   180,   181,
   182,   183,   184,   185,     0,     0,     0,     0,     0,   165,
     0,     0,     0,     0,   309,   166,   167,   168,   169,   170,
   171,   172,   173,     0,   174,   175,   165,     0,     0,     0,
     0,     0,   166,   167,   168,   169,   170,   171,   172,   173,
     0,   174,   175,     0,     0,   176,     0,   177,     0,   178,
     0,   179,     0,     0,   180,   181,   182,   183,   184,   185,
     0,     0,   176,     0,   177,   369,   178,     0,     0,     0,
     0,   180,   181,   182,   183,   184,   185,   165,     0,     0,
     0,     0,     0,   166,   167,   168,   169,   170,   171,   172,
   173,     0,   174,   175,   165,     0,     0,     0,     0,     0,
   166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
   175,     0,     0,   176,     0,   177,     0,   254,     0,     0,
     0,     0,   180,   181,   182,   183,   184,   185,     0,     0,
   176,     0,   177,     0,   256,     0,     0,     0,     0,   180,
   181,   182,   183,   184,   185,   165,     0,     0,     0,     0,
     0,   166,   167,   168,   169,   170,   171,   172,   173,     0,
   174,   175,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   176,     0,   177,     0,   178,     0,     0,     0,     0,
   180,   181,   182,   183,   184,   185,     2,     3,     4,     0,
     0,     0,     6,     0,     0,     0,     8,    84,    10,    11,
     0,     0,    13,    14,    15,    16,     3,     4,    17,    18,
     0,     6,     0,    19,     0,     0,    20,    10,     0,     0,
     0,    13,    14,    15,    16,     0,     0,    17,    18,     0,
     0,     0,    19
};

static const short yycheck[] = {    52,
     7,     1,   206,     1,    30,    31,   119,     1,     1,     1,
    33,    64,    35,   164,    37,    29,   205,   178,    71,   309,
   209,   191,   236,    23,    48,    49,    72,    89,    28,    29,
    30,    31,    24,    73,    72,    81,    43,    31,    65,    66,
    34,    90,    36,    81,    38,    45,   232,    45,   158,    89,
    57,    45,    45,    45,    54,    69,     1,    53,    82,    83,
    73,   164,    73,    90,    67,   410,    23,   223,   178,    69,
    23,   124,    72,    68,   164,    90,    89,   130,    23,   132,
    91,    81,   135,    28,    29,    30,    31,    73,    73,    72,
    86,   137,   205,   254,   140,   256,   209,    54,    81,   137,
    45,    54,   140,   206,    89,    91,   276,   277,   278,    54,
   271,   325,   457,    73,   270,    72,   206,    65,    73,    72,
    90,   128,   326,   312,    81,    68,   236,    72,    81,   315,
   240,    91,   318,   294,    89,   321,    81,   137,    73,    87,
   140,   486,    30,    31,   254,    33,    34,    35,    36,    37,
    38,   496,    87,   309,   137,    68,    75,   140,    19,    68,
   450,    80,    81,   216,    73,   218,   164,   220,   221,    30,
   164,   164,   164,    71,     1,    73,   133,    68,    66,   136,
   137,    70,    73,   140,    68,   178,   178,    90,   133,    73,
   158,   136,   137,    88,    65,   140,   347,    68,   368,   312,
   207,    28,    29,    30,    31,   361,   232,   363,   206,    68,
   178,    68,   206,   206,   206,   325,    73,   231,    45,    88,
   409,   247,   248,   326,   330,    68,   249,    68,    65,   335,
    73,   231,    69,    70,   340,    68,   326,   343,    75,   265,
    67,    65,    65,    66,   347,   245,   246,   247,   248,    30,
    31,    90,    33,    34,   248,    68,   250,   347,   364,    74,
   366,   254,   254,    40,   264,   265,   119,    90,   236,    65,
    66,    85,   240,    69,   300,   301,    43,    44,    45,    75,
    84,    68,    69,    70,   330,   299,   254,   443,    75,   335,
    68,    87,   453,    52,   450,    73,   409,   335,   298,   299,
   461,   462,    69,    70,   153,    72,   155,   301,   157,   323,
    65,    66,   165,    71,    69,    65,    68,    69,    70,    69,
    75,   174,   175,   323,    68,    75,   487,    91,   326,    73,
   330,    68,   326,   326,   326,   335,   449,    87,   191,    73,
   340,    69,    70,   343,   232,   233,   234,   235,    65,   347,
    65,    66,   205,   347,   347,   347,   209,   325,    68,   247,
   248,   249,   250,    72,   364,    65,   366,    43,   217,    69,
   219,    87,    65,   330,    71,    75,    69,   265,   335,    69,
    70,     3,    75,   340,    65,   330,   343,    69,    70,    68,
   335,    13,    14,    75,    16,   340,    65,    19,   343,    68,
    69,    70,    89,   415,    69,   232,    75,   414,    30,    65,
    66,    33,   300,   301,   467,    89,   428,    69,   245,   246,
   247,   248,    69,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,    68,    69,    70,    65,    66,   458,    73,    69,    70,
    87,   232,   233,   465,    75,   283,   284,   285,   286,   312,
    69,   473,   246,   247,   248,    65,   247,   248,    68,    69,
    70,    87,   484,   300,   301,    75,   488,   489,    76,    77,
   264,   265,    46,    47,   265,    87,   498,     4,     5,     6,
   502,    68,     9,    89,   321,    12,    65,    66,    15,    87,
    69,    18,    19,    20,    21,    22,    75,   147,    25,    26,
    89,     3,   152,    30,   154,   368,   156,    87,     3,   300,
   301,    13,    14,    89,    16,    50,    51,    19,    13,    14,
    34,    16,    65,    66,    19,    89,   279,   280,    30,   281,
   282,    33,   287,   288,    91,    30,   245,   246,    33,    66,
    69,     3,     4,     5,     6,     7,   409,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    89,    44,    45,     8,    89,   449,    89,    28,    29,
    30,    31,    68,     0,    89,     0,   374,   290,   292,   289,
   240,   323,   318,    65,    66,    67,   291,    69,   321,   128,
   293,   347,    74,    75,    76,    77,    78,    79,   463,     4,
     5,     6,   302,   241,     9,   254,    45,    12,    90,    91,
    15,    -1,    -1,    18,    19,    20,    21,    22,    -1,    -1,
    25,    26,     4,     5,     6,    30,    -1,     9,    -1,    -1,
    12,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    21,
    22,    -1,    -1,    25,    26,    -1,    -1,    -1,    30,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    10,    11,    -1,    -1,
    -1,    -1,    88,    17,    66,    -1,    91,    -1,    -1,    23,
    24,    -1,    -1,    27,    28,    29,    -1,    31,    32,    -1,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    91,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    69,    -1,    -1,    -1,    -1,
    74,    75,    76,    77,    78,    79,    -1,    -1,     7,    -1,
    -1,    10,    11,    -1,    -1,    -1,    90,    91,    17,    -1,
    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    27,    28,
    29,    -1,    31,    32,    -1,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    -1,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
    69,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    78,
    79,     4,     5,     6,    -1,    -1,     9,    -1,    -1,    12,
    -1,    90,    15,    -1,    -1,    18,    19,    20,    21,    22,
    -1,    -1,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,
    -1,     3,     4,     5,     6,    -1,    -1,     9,    -1,    -1,
    12,    13,    14,    15,    16,    -1,    18,    19,    20,    21,
    22,    -1,    -1,    25,    26,    -1,    -1,    -1,    30,    -1,
    -1,    33,    65,    66,    -1,    -1,    69,    -1,    -1,    -1,
    -1,    -1,    75,    -1,     4,     5,     6,    -1,    -1,     9,
    -1,    -1,    12,    -1,    87,    15,    -1,    -1,    18,    19,
    20,    21,    22,    65,    66,    25,    26,    69,    70,    29,
    30,    -1,    -1,    75,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    -1,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    69,
    -1,    -1,    -1,    -1,    74,    75,    76,    77,    78,    79,
     3,     4,     5,     6,    -1,    -1,     9,    -1,    -1,    12,
    13,    14,    15,    16,    -1,    18,    19,    20,    21,    22,
    -1,    -1,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,
    33,     3,     4,     5,     6,    -1,    -1,     9,    -1,    -1,
    12,    13,    14,    15,    16,    -1,    18,    19,    20,    21,
    22,    -1,    -1,    25,    26,    -1,    -1,    -1,    30,    -1,
    -1,    33,    65,    66,    -1,    -1,    69,    70,     3,     4,
     5,     6,    75,    -1,     9,    -1,    -1,    12,    13,    14,
    15,    16,    -1,    18,    19,    20,    21,    22,    -1,    -1,
    25,    26,    -1,    65,    66,    30,    -1,    69,    33,     3,
     4,     5,     6,    75,    -1,     9,    -1,    -1,    12,    13,
    14,    15,    16,    -1,    18,    19,    20,    21,    22,    -1,
    -1,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    33,
    65,    66,    -1,    -1,    69,    -1,     3,     4,     5,     6,
    75,    -1,     9,    -1,    -1,    12,    13,    14,    15,    16,
    -1,    18,    19,    20,    21,    22,    -1,    -1,    25,    26,
    -1,    65,    66,    30,    -1,    69,    33,     3,     4,     5,
     6,    75,    -1,     9,    -1,    -1,    12,    13,    14,    15,
    16,    -1,    18,    19,    20,    21,    22,    -1,    -1,    25,
    26,    -1,    -1,    -1,    30,    -1,    -1,    33,    65,    66,
    -1,    -1,    69,    -1,     3,     4,     5,     6,    75,    -1,
     9,    -1,    -1,    12,    13,    14,    15,    16,    -1,    18,
    19,    20,    21,    22,    -1,    -1,    25,    26,    -1,    65,
    66,    30,    -1,    69,    33,     4,     5,     6,    -1,    75,
     9,    -1,    -1,    12,    -1,    -1,    15,    -1,    -1,    18,
    19,    20,    21,    22,    -1,    -1,    25,    26,    -1,    -1,
    -1,    30,     3,     4,     5,     6,    65,    66,     9,    -1,
    69,    12,    13,    14,    15,    16,    75,    18,    19,    20,
    21,    22,    -1,    -1,    25,    26,    -1,    -1,    -1,    30,
    -1,    -1,    33,    -1,    -1,    -1,    -1,    66,    -1,    -1,
    69,    70,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    54,    -1,    -1,    -1,     3,     4,     5,
     6,    -1,    -1,     9,    -1,    66,    12,    13,    14,    15,
    16,    -1,    18,    19,    20,    21,    22,    -1,    -1,    25,
    26,    -1,    -1,    -1,    30,    29,    -1,    33,    -1,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    -1,
    44,    45,    -1,    29,    -1,    -1,    -1,    -1,    -1,    35,
    36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
    66,    65,    -1,    67,    -1,    69,    -1,    -1,    -1,    -1,
    74,    75,    76,    77,    78,    79,    -1,    -1,    -1,    65,
    -1,    67,    -1,    69,    -1,    -1,    90,    91,    74,    75,
    76,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    90,    35,    36,    37,    38,    39,
    40,    41,    42,    -1,    44,    45,    29,    -1,    -1,    -1,
    -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    -1,    -1,    65,    -1,    67,    -1,    69,
    -1,    71,    -1,    -1,    74,    75,    76,    77,    78,    79,
    -1,    -1,    65,    -1,    67,    68,    69,    -1,    -1,    -1,
    -1,    74,    75,    76,    77,    78,    79,    29,    -1,    -1,
    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    -1,    44,    45,    29,    -1,    -1,    -1,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    -1,    44,
    45,    -1,    -1,    65,    -1,    67,    -1,    69,    -1,    -1,
    -1,    -1,    74,    75,    76,    77,    78,    79,    -1,    -1,
    65,    -1,    67,    -1,    69,    -1,    -1,    -1,    -1,    74,
    75,    76,    77,    78,    79,    29,    -1,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    -1,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    67,    -1,    69,    -1,    -1,    -1,    -1,
    74,    75,    76,    77,    78,    79,     3,     4,     5,    -1,
    -1,    -1,     9,    -1,    -1,    -1,    13,    14,    15,    16,
    -1,    -1,    19,    20,    21,    22,     4,     5,    25,    26,
    -1,     9,    -1,    30,    -1,    -1,    33,    15,    -1,    -1,
    -1,    19,    20,    21,    22,    -1,    -1,    25,    26,    -1,
    -1,    -1,    30
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/store/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__

#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/store/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 212 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,Integer,ccchere);
          ;
    break;}
case 2:
#line 216 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,UInteger,ccchere);
          ;
    break;}
case 3:
#line 220 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,Long,ccchere);
          ;
    break;}
case 4:
#line 224 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,ULong,ccchere);
          ;
    break;}
case 5:
#line 228 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,Floating,ccchere);
          ;
    break;}
case 6:
#line 232 "gram.y"
{
              yyval.cexpr=new ConstExpr(yyvsp[0].str,DoubleF,ccchere);
          ;
    break;}
case 7:
#line 236 "gram.y"
{
              // Remember that the pings are still present.
              yyval.cexpr=new ConstExpr(yyvsp[0].str,Character,ccchere);
          ;
    break;}
case 8:
#line 244 "gram.y"
{
              // Remember that the quotes are still present.
              yyval.cexpr=new ConstExpr(yyvsp[0].str,StrConst,ccchere);
          ;
    break;}
case 9:
#line 249 "gram.y"
{
              // Concatenate the two strings by removing the " at
              // the end of the first string and the beginning of
              // the second one.
              int s1 = strlen(yyvsp[-1].cexpr->literal);
              int s2 = strlen(yyvsp[0].str);
              char* str = new char[s1+s2-1];
              strcpy(str,yyvsp[-1].cexpr->literal);
              strcpy(str+s1-1,yyvsp[0].str+1);
              yyvsp[-1].cexpr->literal = str;
              yyval.cexpr = yyvsp[-1].cexpr;
          ;
    break;}
case 10:
#line 267 "gram.y"
{
              // Find the declaration for this identifier.
              yyval.expr=add_var_ref(yyvsp[0].str,ccchere);
          ;
    break;}
case 11:
#line 272 "gram.y"
{
            VarExpr *e = add_var_ref(yyvsp[0].str,ccchere);
            e->annos = directives.AnnoFromString(yyvsp[-2].str,ccchere);
            yyval.expr = e ;
          ;
    break;}
case 12:
#line 277 "gram.y"
{ yyval.expr=yyvsp[0].cexpr; ;
    break;}
case 13:
#line 278 "gram.y"
{ yyval.expr=yyvsp[0].cexpr; ;
    break;}
case 14:
#line 279 "gram.y"
{ yyval.expr=yyvsp[-1].expr; ;
    break;}
case 15:
#line 283 "gram.y"
{ yyval.exprs = new Plist<Expr>(); ;
    break;}
case 16:
#line 284 "gram.y"
{ yyval.exprs = yyvsp[-1].exprs ; ;
    break;}
case 17:
#line 288 "gram.y"
{ yyval.expr=yyvsp[0].expr; ;
    break;}
case 18:
#line 290 "gram.y"
{
              yyval.expr=new ArrayExpr(yyvsp[-3].expr,yyvsp[-1].expr,yyvsp[-3].expr->pos);
          ;
    break;}
case 19:
#line 294 "gram.y"
{
              yyval.expr=new CallExpr(yyvsp[-1].expr,yyvsp[-1].expr->pos,yyvsp[0].exprs);
          ;
    break;}
case 20:
#line 297 "gram.y"
{;
    break;}
case 21:
#line 298 "gram.y"
{
              yyval.expr=new DotExpr(yyvsp[-3].expr,yyvsp[0].str,yyvsp[-3].expr->pos);
          ;
    break;}
case 22:
#line 301 "gram.y"
{;
    break;}
case 23:
#line 302 "gram.y"
{
              // Convert "a->m" into "(*a).m"
              UnaryExpr* p = new UnaryExpr(yyvsp[-3].expr);
              yyval.expr=new DotExpr(p,yyvsp[0].str,p->pos);
          ;
    break;}
case 24:
#line 308 "gram.y"
{
              yyval.expr=new PostExpr(yyvsp[-1].expr,Inc,yyvsp[-1].expr->pos);
          ;
    break;}
case 25:
#line 312 "gram.y"
{
              yyval.expr=new PostExpr(yyvsp[-1].expr,Decr,yyvsp[-1].expr->pos);
          ;
    break;}
case 28:
#line 324 "gram.y"
{
              yyval.exprs=new Plist<Expr>(yyvsp[0].expr);
          ;
    break;}
case 29:
#line 328 "gram.y"
{
              yyvsp[-2].exprs->push_back(yyvsp[0].expr); yyval.exprs=yyvsp[-2].exprs;
          ;
    break;}
case 30:
#line 334 "gram.y"
{ yyval.expr=yyvsp[0].expr; ;
    break;}
case 31:
#line 335 "gram.y"
{ yyval.expr=new PreExpr(yyvsp[0].expr,Inc,yyvsp[0].expr->pos); ;
    break;}
case 32:
#line 336 "gram.y"
{ yyval.expr=new PreExpr(yyvsp[0].expr,Decr,yyvsp[0].expr->pos); ;
    break;}
case 33:
#line 338 "gram.y"
{
              yyval.expr=new UnaryExpr(yyvsp[0].expr,yyvsp[-1].unop,yyvsp[0].expr->pos);
          ;
    break;}
case 34:
#line 342 "gram.y"
{
              yyval.expr=new ExprSize(yyvsp[0].expr,yyvsp[0].expr->pos)
          ;
    break;}
case 35:
#line 346 "gram.y"
{
              yyval.expr=new TypeSize(yyvsp[-1].type,ccchere)
          ;
    break;}
case 36:
#line 352 "gram.y"
{ yyval.unop=Addr; ;
    break;}
case 37:
#line 353 "gram.y"
{ yyval.unop=DeRef; ;
    break;}
case 38:
#line 354 "gram.y"
{ yyval.unop=Pos; ;
    break;}
case 39:
#line 355 "gram.y"
{ yyval.unop=Neg; ;
    break;}
case 40:
#line 356 "gram.y"
{ yyval.unop=Not; ;
    break;}
case 41:
#line 357 "gram.y"
{ yyval.unop=Bang; ;
    break;}
case 43:
#line 363 "gram.y"
{
            yyval.expr=new CastExpr(yyvsp[-2].type,yyvsp[0].expr,ccchere);
        ;
    break;}
case 45:
#line 371 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Mul,yyvsp[-2].expr->pos);
          ;
    break;}
case 46:
#line 375 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Div,yyvsp[-2].expr->pos);
          ;
    break;}
case 47:
#line 379 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Mod,yyvsp[-2].expr->pos);
          ;
    break;}
case 49:
#line 387 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Add,yyvsp[-2].expr->pos);
          ;
    break;}
case 50:
#line 391 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Sub,yyvsp[-2].expr->pos);
          ;
    break;}
case 52:
#line 399 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,LShift,yyvsp[-2].expr->pos);
          ;
    break;}
case 53:
#line 403 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,RShift,yyvsp[-2].expr->pos);
          ;
    break;}
case 55:
#line 411 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,LT,yyvsp[-2].expr->pos);
          ;
    break;}
case 56:
#line 415 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,GT,yyvsp[-2].expr->pos);
          ;
    break;}
case 57:
#line 419 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,LEq,yyvsp[-2].expr->pos);
          ;
    break;}
case 58:
#line 423 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,GEq,yyvsp[-2].expr->pos);
          ;
    break;}
case 60:
#line 431 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Eq,yyvsp[-2].expr->pos);
          ;
    break;}
case 61:
#line 435 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,NEq,yyvsp[-2].expr->pos);
          ;
    break;}
case 63:
#line 443 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,BAnd,yyvsp[-2].expr->pos);
          ;
    break;}
case 65:
#line 451 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,BEOr,yyvsp[-2].expr->pos);
          ;
    break;}
case 67:
#line 459 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,BOr,yyvsp[-2].expr->pos);
          ;
    break;}
case 69:
#line 467 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,And,yyvsp[-2].expr->pos);
          ;
    break;}
case 71:
#line 475 "gram.y"
{
              yyval.expr=new BinaryExpr(yyvsp[-2].expr,yyvsp[0].expr,Or,yyvsp[-2].expr->pos);
          ;
    break;}
case 73:
#line 483 "gram.y"
{
              yyval.expr=new CondExpr(yyvsp[-4].expr,yyvsp[-2].expr,yyvsp[0].expr,yyvsp[-4].expr->pos);
          ;
    break;}
case 75:
#line 491 "gram.y"
{
              yyval.expr=new AssignExpr(yyvsp[-2].expr,yyvsp[0].expr,yyvsp[-1].asgnop,yyvsp[-2].expr->pos);
          ;
    break;}
case 76:
#line 497 "gram.y"
{ yyval.asgnop=Asgn; ;
    break;}
case 77:
#line 498 "gram.y"
{ yyval.asgnop=MulAsgn; ;
    break;}
case 78:
#line 499 "gram.y"
{ yyval.asgnop=DivAsgn; ;
    break;}
case 79:
#line 500 "gram.y"
{ yyval.asgnop=ModAsgn; ;
    break;}
case 80:
#line 501 "gram.y"
{ yyval.asgnop=AddAsgn; ;
    break;}
case 81:
#line 502 "gram.y"
{ yyval.asgnop=SubAsgn; ;
    break;}
case 82:
#line 503 "gram.y"
{ yyval.asgnop=LSAsgn; ;
    break;}
case 83:
#line 504 "gram.y"
{ yyval.asgnop=RSAsgn; ;
    break;}
case 84:
#line 505 "gram.y"
{ yyval.asgnop=AndAsgn; ;
    break;}
case 85:
#line 506 "gram.y"
{ yyval.asgnop=EOrAsgn; ;
    break;}
case 86:
#line 507 "gram.y"
{ yyval.asgnop=OrAsgn; ;
    break;}
case 88:
#line 513 "gram.y"
{ yyval.expr=new CommaExpr(yyvsp[-2].expr,yyvsp[0].expr,yyvsp[-2].expr->pos); ;
    break;}
case 90:
#line 522 "gram.y"
{ yyval.expr=NULL; ;
    break;}
case 92:
#line 561 "gram.y"
{
	    // A lone structure declaration. It has to be inserted if
	    // it is not in local scope.
	    lone_sue(yyvsp[-1].utype);
	  ;
    break;}
case 93:
#line 567 "gram.y"
{
	    lone_sue(yyvsp[-1].utype);
	  ;
    break;}
case 94:
#line 570 "gram.y"
{ delete yyvsp[-1].gtype; ;
    break;}
case 95:
#line 571 "gram.y"
{ delete yyvsp[-1].gtype; ;
    break;}
case 96:
#line 579 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); yyval.gtype = yyvsp[-1].pt; ;
    break;}
case 97:
#line 581 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-1].gtype; ;
    break;}
case 98:
#line 583 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); yyval.gtype=yyvsp[-1].pt; ;
    break;}
case 99:
#line 585 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-1].gtype; ;
    break;}
case 100:
#line 587 "gram.y"
{ add_declaration(yyvsp[-2].gtype,yyvsp[0].idmod); ;
    break;}
case 101:
#line 589 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-4].gtype; ;
    break;}
case 102:
#line 594 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); yyval.gtype = yyvsp[-1].gtype; ;
    break;}
case 103:
#line 596 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-1].gtype; ;
    break;}
case 104:
#line 598 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); yyval.gtype = yyvsp[-1].gtype; ;
    break;}
case 105:
#line 600 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-1].gtype; ;
    break;}
case 106:
#line 602 "gram.y"
{ add_declaration(yyvsp[-2].gtype,yyvsp[0].idmod); ;
    break;}
case 107:
#line 604 "gram.y"
{ add_initializer(yyvsp[0].init); yyval.gtype=yyvsp[-4].gtype; ;
    break;}
case 108:
#line 609 "gram.y"
{ yyval.gtype=yyvsp[0].pt; ;
    break;}
case 109:
#line 611 "gram.y"
{ yyval.gtype=yyvsp[0].utype; ;
    break;}
case 110:
#line 613 "gram.y"
{ yyval.gtype=yyvsp[0].tdtype; ;
    break;}
case 111:
#line 618 "gram.y"
{ yyval.gtype=yyvsp[0].pt; ;
    break;}
case 112:
#line 620 "gram.y"
{ yyval.gtype=yyvsp[0].utype; ;
    break;}
case 113:
#line 622 "gram.y"
{ yyval.gtype=yyvsp[0].tdtype; ;
    break;}
case 115:
#line 629 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt ;
    break;}
case 116:
#line 631 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt ;
    break;}
case 118:
#line 637 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt ;
    break;}
case 121:
#line 646 "gram.y"
{ (yyval.pt=new Parse_Type())->qualifiers=constvol(true,false); ;
    break;}
case 122:
#line 647 "gram.y"
{ (yyval.pt=new Parse_Type())->qualifiers=constvol(false,true); ;
    break;}
case 123:
#line 653 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 124:
#line 655 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 125:
#line 657 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 126:
#line 659 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 128:
#line 665 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 129:
#line 667 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 130:
#line 669 "gram.y"
{ yyvsp[-1].pt->combine(*yyvsp[0].pt); yyval.pt=yyvsp[-1].pt; ;
    break;}
case 131:
#line 675 "gram.y"
{ yyvsp[0].utype->combine(*yyvsp[-1].pt); yyval.utype=yyvsp[0].utype; ;
    break;}
case 132:
#line 677 "gram.y"
{ yyvsp[-1].utype->combine(*yyvsp[0].pt); yyval.utype=yyvsp[-1].utype; ;
    break;}
case 133:
#line 679 "gram.y"
{ yyvsp[-1].utype->combine(*yyvsp[0].pt); yyval.utype=yyvsp[-1].utype; ;
    break;}
case 135:
#line 685 "gram.y"
{ yyvsp[0].utype->combine(*yyvsp[-1].pt); yyval.utype=yyvsp[0].utype; ;
    break;}
case 136:
#line 687 "gram.y"
{ yyvsp[-1].utype->combine(*yyvsp[0].pt); yyval.utype=yyvsp[-1].utype; ;
    break;}
case 137:
#line 693 "gram.y"
{ yyvsp[-1].tdtype->combine(*yyvsp[0].pt); yyval.tdtype=yyvsp[-1].tdtype; ;
    break;}
case 138:
#line 695 "gram.y"
{ Parse_TypedefType *r = make_typedef(yyvsp[0].str);
            r->combine(*yyvsp[-1].pt);
            yyval.tdtype = r;
          ;
    break;}
case 139:
#line 700 "gram.y"
{ yyvsp[-1].tdtype->combine(*yyvsp[0].pt); yyval.tdtype=yyvsp[-1].tdtype; ;
    break;}
case 140:
#line 705 "gram.y"
{ yyval.tdtype=make_typedef(yyvsp[0].str); ;
    break;}
case 141:
#line 707 "gram.y"
{ Parse_TypedefType *r = make_typedef(yyvsp[0].str);
            r->combine(*yyvsp[-1].pt);
            yyval.tdtype = r;
          ;
    break;}
case 142:
#line 712 "gram.y"
{ yyvsp[-1].tdtype->combine(*yyvsp[0].pt); yyval.tdtype=yyvsp[-1].tdtype; ;
    break;}
case 143:
#line 716 "gram.y"
{ yyval.pt=new Parse_Type(P_Typedef); ;
    break;}
case 144:
#line 717 "gram.y"
{ yyval.pt=new Parse_Type(P_Extern); ;
    break;}
case 145:
#line 718 "gram.y"
{ yyval.pt=new Parse_Type(P_Static); ;
    break;}
case 146:
#line 719 "gram.y"
{ yyval.pt=new Parse_Type(P_Auto); ;
    break;}
case 147:
#line 720 "gram.y"
{ yyval.pt=new Parse_Type(P_Register); ;
    break;}
case 148:
#line 724 "gram.y"
{ yyval.pt=new Parse_Type(P_Int); ;
    break;}
case 149:
#line 725 "gram.y"
{ yyval.pt=new Parse_Type(P_Char); ;
    break;}
case 150:
#line 726 "gram.y"
{ yyval.pt=new Parse_Type(P_Short); ;
    break;}
case 151:
#line 727 "gram.y"
{ yyval.pt=new Parse_Type(P_Long); ;
    break;}
case 152:
#line 728 "gram.y"
{ yyval.pt=new Parse_Type(P_Float); ;
    break;}
case 153:
#line 729 "gram.y"
{ yyval.pt=new Parse_Type(P_Double); ;
    break;}
case 154:
#line 730 "gram.y"
{ yyval.pt=new Parse_Type(P_Signed); ;
    break;}
case 155:
#line 731 "gram.y"
{ yyval.pt=new Parse_Type(P_Unsigned); ;
    break;}
case 156:
#line 732 "gram.y"
{ yyval.pt=new Parse_Type(P_Void); ;
    break;}
case 159:
#line 741 "gram.y"
{ members_enter_scope(); ;
    break;}
case 160:
#line 743 "gram.y"
{
	    /* Insert into the right symboltable. */
	    char const *aname = fresh_anonymous_name() ;
            anonymous_struct_decl(yyvsp[-4].uttag,aname);
	    /* Make a temporary type for it. */
            yyval.utype = new Parse_UserType(aname,yyvsp[-4].uttag);
            members_leave_scope();
          ;
    break;}
case 161:
#line 752 "gram.y"
{
              members_enter_scope();
	      // Reserve name (incomplete declaration).
              introduce_struct_decl(yyvsp[-1].uttag, yyvsp[0].str);
          ;
    break;}
case 162:
#line 758 "gram.y"
{
	      // Complete declaration.
              update_struct_decl(yyvsp[-4].str);
              yyval.utype = new Parse_UserType(yyvsp[-4].str,yyvsp[-5].uttag);
              members_leave_scope();
          ;
    break;}
case 163:
#line 765 "gram.y"
{
              find_struct_decl(yyvsp[-1].uttag, yyvsp[0].str);
              yyval.utype = new Parse_UserType(yyvsp[0].str,yyvsp[-1].uttag);
          ;
    break;}
case 164:
#line 772 "gram.y"
{ yyval.uttag=Struct; ;
    break;}
case 165:
#line 773 "gram.y"
{ yyval.uttag=Union; ;
    break;}
case 166:
#line 778 "gram.y"
{;
    break;}
case 167:
#line 780 "gram.y"
{ ;
    break;}
case 168:
#line 784 "gram.y"
{ delete yyvsp[-1].gtype; ;
    break;}
case 169:
#line 785 "gram.y"
{ delete yyvsp[-1].gtype; ;
    break;}
case 170:
#line 790 "gram.y"
{ add_member(yyvsp[-1].pt,yyvsp[0].mempost); yyval.gtype=yyvsp[-1].pt; ;
    break;}
case 171:
#line 792 "gram.y"
{ add_member(yyvsp[-2].gtype,yyvsp[0].mempost); yyval.gtype=yyvsp[-2].gtype; ;
    break;}
case 172:
#line 797 "gram.y"
{ add_member(yyvsp[-1].gtype,yyvsp[0].mempost); yyval.gtype=yyvsp[-1].gtype; ;
    break;}
case 173:
#line 799 "gram.y"
{ add_member(yyvsp[-2].gtype,yyvsp[0].mempost); yyval.gtype=yyvsp[-2].gtype; ;
    break;}
case 174:
#line 804 "gram.y"
{ yyval.mempost=new Parse_MemberId(yyvsp[-1].idmod,yyvsp[0].expr); ;
    break;}
case 175:
#line 806 "gram.y"
{ yyval.mempost=new Parse_MemberId(NULL,yyvsp[0].expr); ;
    break;}
case 176:
#line 811 "gram.y"
{ yyval.mempost=new Parse_MemberId(yyvsp[-1].idmod,yyvsp[0].expr); ;
    break;}
case 177:
#line 813 "gram.y"
{ yyval.mempost=new Parse_MemberId(NULL,yyvsp[0].expr); ;
    break;}
case 178:
#line 818 "gram.y"
{ yyval.expr = NULL; ;
    break;}
case 180:
#line 824 "gram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 181:
#line 829 "gram.y"
{
	    // Insert it into the right symboltable.
            char const *aname = fresh_anonymous_name() ;
	    add_enum_decl(aname);
	    // Make a temporary type for it.
            yyval.utype = new Parse_UserType(aname,Enum);
          ;
    break;}
case 182:
#line 837 "gram.y"
{
	    add_enum_decl(yyvsp[-3].str);
            yyval.utype = new Parse_UserType(yyvsp[-3].str,Enum);
          ;
    break;}
case 183:
#line 842 "gram.y"
{
	    find_enum_decl(yyvsp[0].str);
            yyval.utype = new Parse_UserType(yyvsp[0].str,Enum);
          ;
    break;}
case 184:
#line 850 "gram.y"
{
            add_enumconst(yyvsp[-1].str,ccchere,yyvsp[0].expr);
          ;
    break;}
case 185:
#line 854 "gram.y"
{
            add_enumconst(yyvsp[-1].str,ccchere,yyvsp[0].expr);
          ;
    break;}
case 186:
#line 861 "gram.y"
{ yyval.expr = NULL; ;
    break;}
case 187:
#line 863 "gram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 188:
#line 868 "gram.y"
{ yyval.boolean = false; ;
    break;}
case 189:
#line 869 "gram.y"
{ yyval.boolean = true; ;
    break;}
case 192:
#line 879 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 193:
#line 881 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 194:
#line 883 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 195:
#line 885 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 196:
#line 887 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 197:
#line 889 "gram.y"
{ add_declaration(yyvsp[-1].gtype,yyvsp[0].idmod); delete yyvsp[-1].gtype; ;
    break;}
case 198:
#line 891 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); delete yyvsp[-1].pt; ;
    break;}
case 199:
#line 893 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); delete yyvsp[-1].pt; ;
    break;}
case 200:
#line 895 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); delete yyvsp[-1].pt; ;
    break;}
case 201:
#line 897 "gram.y"
{ add_declaration(yyvsp[-1].pt,yyvsp[0].idmod); delete yyvsp[-1].pt; ;
    break;}
case 202:
#line 906 "gram.y"
{ // Make a plain int declaration. Later on we decide
            // wheter to use this or an explicit parameter declaration.
            Parse_Type pt ;
            add_declaration(&pt,new Parse_Declarator(yyvsp[0].str,ccchere));
          ;
    break;}
case 203:
#line 912 "gram.y"
{ Parse_Type pt ;
            add_declaration(&pt,new Parse_Declarator(yyvsp[0].str,ccchere));
          ;
    break;}
case 206:
#line 924 "gram.y"
{ Type* t = yyvsp[0].idmod->maketype(yyvsp[-1].gtype) ;
            delete yyvsp[-1].gtype ;
            delete yyvsp[0].idmod ;
            yyval.type = t ;
          ;
    break;}
case 207:
#line 930 "gram.y"
{ Type* t = yyvsp[0].idmod->maketype(yyvsp[-1].pt) ;
            delete yyvsp[-1].pt ;
            delete yyvsp[0].idmod ;
            yyval.type = t ;
          ;
    break;}
case 208:
#line 939 "gram.y"
{ yyval.init=NULL; ;
    break;}
case 209:
#line 941 "gram.y"
{ yyval.init=yyvsp[0].init; ;
    break;}
case 210:
#line 946 "gram.y"
{ yyval.init=yyvsp[-1].init; ;
    break;}
case 211:
#line 948 "gram.y"
{ yyval.init=yyvsp[-2].init; ;
    break;}
case 212:
#line 950 "gram.y"
{ yyval.init=new Init(yyvsp[0].expr); ;
    break;}
case 213:
#line 955 "gram.y"
{ yyval.init=new Init(yyvsp[0].init);;
    break;}
case 214:
#line 957 "gram.y"
{ yyval.init=yyvsp[-2].init->append(yyvsp[0].init); ;
    break;}
case 221:
#line 974 "gram.y"
{
	      LabelStmt* s = new LabelStmt(yyvsp[-2].str,yyvsp[0].stmt,ccchere);
              add_Label(s);
	      yyval.stmt=s;
          ;
    break;}
case 222:
#line 980 "gram.y"
{
              yyval.stmt=new CaseStmt(yyvsp[-2].expr->pos,yyvsp[-2].expr,yyvsp[0].stmt);
          ;
    break;}
case 223:
#line 984 "gram.y"
{
              yyval.stmt=new DefaultStmt(yyvsp[0].stmt->pos,yyvsp[0].stmt);
          ;
    break;}
case 224:
#line 991 "gram.y"
{
              enter_scope();
	  ;
    break;}
case 225:
#line 996 "gram.y"
{
	      yyval.stmt = yyvsp[-1].stmt;
	      leave_scope();
	  ;
    break;}
case 226:
#line 1002 "gram.y"
{ yyval.pos.set(ccchere); ;
    break;}
case 227:
#line 1006 "gram.y"
{
              // Pick up the declarations.
              Plist<VarDecl>* dcls = objects.get_list();
	      yyval.stmt=new CompoundStmt(yyvsp[-2].pos,dcls,yyvsp[0].stmts);
          ;
    break;}
case 231:
#line 1021 "gram.y"
{ yyval.stmts=new Plist<Stmt>; ;
    break;}
case 232:
#line 1026 "gram.y"
{
              yyval.stmts=new Plist<Stmt>(yyvsp[0].stmt);
          ;
    break;}
case 233:
#line 1030 "gram.y"
{
              yyvsp[-1].stmts->push_back(yyvsp[0].stmt);
              yyval.stmts=yyvsp[-1].stmts;
          ;
    break;}
case 234:
#line 1038 "gram.y"
{
              // The epression could be NULL (nothing).
              if (yyvsp[-1].expr==NULL)
                  yyval.stmt=new DummyStmt(ccchere);
              else
                  yyval.stmt=new ExprStmt(yyvsp[-1].expr->pos,yyvsp[-1].expr);
          ;
    break;}
case 235:
#line 1049 "gram.y"
{
              yyval.stmt=new IfStmt(yyvsp[-2].expr->pos,yyvsp[-2].expr,yyvsp[0].stmt,new DummyStmt(ccchere));
          ;
    break;}
case 236:
#line 1053 "gram.y"
{
              yyval.stmt=new IfStmt(yyvsp[-4].expr->pos,yyvsp[-4].expr,yyvsp[-2].stmt,yyvsp[0].stmt);
          ;
    break;}
case 237:
#line 1057 "gram.y"
{
              yyval.stmt=new SwitchStmt(yyvsp[-2].expr->pos,yyvsp[-2].expr,yyvsp[0].stmt);
          ;
    break;}
case 238:
#line 1064 "gram.y"
{
              yyval.stmt=new WhileStmt(yyvsp[-2].expr->pos,yyvsp[-2].expr,yyvsp[0].stmt);
          ;
    break;}
case 239:
#line 1068 "gram.y"
{
              yyval.stmt=new DoStmt(yyvsp[-5].stmt->pos,yyvsp[-2].expr,yyvsp[-5].stmt);
         ;
    break;}
case 240:
#line 1073 "gram.y"
{
              // Expressions can be NULL;
              Position p = yyvsp[0].stmt->pos;
              if (yyvsp[-6].expr != NULL)
                  p = yyvsp[-6].expr->pos;
              else if (yyvsp[-4].expr != NULL)
                  p = yyvsp[-4].expr->pos;
              else if (yyvsp[-2].expr != NULL)
                  p = yyvsp[-2].expr->pos;
              yyval.stmt=new ForStmt(p,yyvsp[-6].expr,yyvsp[-4].expr,yyvsp[-2].expr,yyvsp[0].stmt);
          ;
    break;}
case 241:
#line 1088 "gram.y"
{
              yyval.stmt=new GotoStmt(ccchere,add_goto(yyvsp[-1].str,ccchere));
          ;
    break;}
case 242:
#line 1092 "gram.y"
{
              yyval.stmt=new ContStmt(ccchere);
          ;
    break;}
case 243:
#line 1096 "gram.y"
{
              yyval.stmt=new BreakStmt(ccchere);
          ;
    break;}
case 244:
#line 1100 "gram.y"
{
              yyval.stmt=new ReturnStmt(ccchere,yyvsp[-1].expr);
          ;
    break;}
case 245:
#line 1108 "gram.y"
{ settheflag(); ;
    break;}
case 246:
#line 1108 "gram.y"
{ clean_up_between_files(); ;
    break;}
case 249:
#line 1115 "gram.y"
{ Diagnostic(FATAL,ccchere)
              << "This is not a C source file" ;
          ;
    break;}
case 250:
#line 1119 "gram.y"
{ Diagnostic(FATAL,ccchere)
              << "This is not a C source file" ;
          ;
    break;}
case 254:
#line 1132 "gram.y"
{ /* ignore attempt to redefine */ ;
    break;}
case 255:
#line 1133 "gram.y"
{
	      Type *thetype = new AbsType(yyvsp[0].str,yyvsp[-2].str);
              VarDecl *decl
                  = new VarDecl(yyvsp[0].str,ccchere,thetype,AbstractType,VarMu);
              names.insert(yyvsp[0].str,decl);
              assert(yyvsp[-2].str!=NULL);
              objects.push_back(decl);
              directives.add_taboo(yyvsp[0].str);
          ;
    break;}
case 257:
#line 1147 "gram.y"
{ enter_old_parameter_scope(); ;
    break;}
case 258:
#line 1149 "gram.y"
{ leave_old_parameter_scope(yyvsp[-2].idmod->typemods.back()); yyval.idmod=yyvsp[-2].idmod; ;
    break;}
case 259:
#line 1154 "gram.y"
{ begin_FunDef(new Parse_Type(),yyvsp[0].idmod); ;
    break;}
case 261:
#line 1157 "gram.y"
{ begin_FunDef(yyvsp[-1].gtype,yyvsp[0].idmod); ;
    break;}
case 263:
#line 1160 "gram.y"
{ begin_FunDef(yyvsp[-1].gtype,yyvsp[0].idmod); ;
    break;}
case 265:
#line 1163 "gram.y"
{ begin_FunDef(yyvsp[-1].pt,yyvsp[0].idmod); ;
    break;}
case 267:
#line 1166 "gram.y"
{ begin_FunDef(yyvsp[-1].pt,yyvsp[0].idmod); ;
    break;}
case 269:
#line 1172 "gram.y"
{ end_FunDef(yyvsp[-1].stmt); ;
    break;}
case 276:
#line 1195 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod; ;
    break;}
case 277:
#line 1197 "gram.y"
{ yyval.idmod=yyvsp[-2].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 278:
#line 1199 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 279:
#line 1201 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 280:
#line 1209 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod; ;
    break;}
case 281:
#line 1211 "gram.y"
{ yyval.idmod=yyvsp[-2].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 282:
#line 1213 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 285:
#line 1223 "gram.y"
{ yyval.idmod=new Parse_Declarator(yyvsp[0].str,ccchere); ;
    break;}
case 286:
#line 1225 "gram.y"
{ yyval.idmod=new Parse_Declarator(yyvsp[-1].str,ccchere,yyvsp[0].typemods); ;
    break;}
case 289:
#line 1235 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 290:
#line 1237 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 291:
#line 1239 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod; ;
    break;}
case 292:
#line 1241 "gram.y"
{ yyval.idmod=yyvsp[-2].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 293:
#line 1243 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 294:
#line 1248 "gram.y"
{ yyval.idmod=new Parse_Declarator(yyvsp[0].str,ccchere); ;
    break;}
case 295:
#line 1250 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod; ;
    break;}
case 296:
#line 1254 "gram.y"
{ enter_scope(); ;
    break;}
case 297:
#line 1255 "gram.y"
{ yyval.idmod=yyvsp[-4].idmod->prepend_typemods(leave_parameter_scope(false)); ;
    break;}
case 298:
#line 1257 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod;;
    break;}
case 299:
#line 1259 "gram.y"
{ yyval.idmod=yyvsp[-2].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 300:
#line 1261 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 302:
#line 1266 "gram.y"
{ yyval.idmod=new Parse_Declarator(NULL,ccchere); ;
    break;}
case 303:
#line 1270 "gram.y"
{ yyval.idmod=new Parse_Declarator(NULL,ccchere,yyvsp[0].typemods); ;
    break;}
case 304:
#line 1272 "gram.y"
{ yyval.idmod=new Parse_Declarator(NULL,ccchere,yyvsp[0].typemods); ;
    break;}
case 305:
#line 1274 "gram.y"
{ yyval.idmod=yyvsp[0].idmod->prepend_typemods(yyvsp[-1].typemods); ;
    break;}
case 306:
#line 1276 "gram.y"
{ yyval.idmod=yyvsp[-1].idmod; ;
    break;}
case 307:
#line 1278 "gram.y"
{ yyval.idmod=yyvsp[-2].idmod->prepend_typemods(yyvsp[0].typemods); ;
    break;}
case 308:
#line 1283 "gram.y"
{ yyval.typemods=new Plist<Parse_Typemod>(new Parse_Pointer(constvol())); ;
    break;}
case 309:
#line 1285 "gram.y"
{ Parse_Pointer *pp = new Parse_Pointer(yyvsp[0].pt->qualifiers);
            delete yyvsp[0].pt ;
            yyval.typemods=new Plist<Parse_Typemod>(pp);
          ;
    break;}
case 311:
#line 1294 "gram.y"
{ Parse_Typemod *tm = new Parse_Funtype(new Plist<VarDecl>(),true,
                                                  new Plist<UserDecl>,ccchere);
            yyval.typemods = new Plist<Parse_Typemod>(tm);
          ;
    break;}
case 312:
#line 1298 "gram.y"
{enter_scope();;
    break;}
case 313:
#line 1299 "gram.y"
{ yyval.typemods = leave_parameter_scope(yyvsp[-1].boolean); ;
    break;}
case 314:
#line 1304 "gram.y"
{ yyval.typemods=new Plist<Parse_Typemod>(new Parse_Array((Expr*)NULL)); ;
    break;}
case 315:
#line 1306 "gram.y"
{ yyval.typemods=new Plist<Parse_Typemod>(new Parse_Array(yyvsp[-1].expr)); ;
    break;}
case 316:
#line 1311 "gram.y"
{ yyvsp[-3].typemods->push_front(new Parse_Array(yyvsp[-1].expr)); yyval.typemods=yyvsp[-3].typemods; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/store/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1314 "gram.y"

/* ----end of grammar----*/

#ifdef YYDEBUG
        static void settheflag() {
            if (trace_c_parser)
                yydebug=1 ;
        }

#endif

cccParser parser ;
